1. TYPES OF STORAGE CLASS SPECIFIERS IN C:
    auto
    extern
    static
    register
    Typedef

2. TYPES OF C TYPE QUALIFIERS:
    const
    volatile
    
3. TYPES OF MODIFIERS:
    long
    unsigned
    short
    signed
    double

4. DERIVED DATA TYPE IN C:
    Array, 
    pointer, 
    structure and
    union
    
5. USER DEFINED DATA TYPES:
    typedef
    structure
    union
    enum
    
6. Difference between malloc , calloc & realloc
    malloc:
        void *malloc(size_t size);
        
      1. allocates memory interms of byte
      2. <datatype> *a = (<datatype>*)malloc(10 * sizef(datatype))
      3. if system is not able allocate memory it returns NULL
    calloc:
        void* calloc( size_t num, size_t size );
        
      1. allocates memory for n objects of particular size
      2. The major difference with malloc is the memory initialized with 0
      2. calloc(10,sizeof(datatype))
      
    realloc:
        void *realloc(void *ptr, size_t size);
        
        Suppose a pointer (say ptr) is pointing to a memory of 10 int on heap allocated using malloc as below.
        
        **************************************
        *           * ----------- *          *
        **************************************
        1000      1010  mem for   2000        n
        ^           ^    other 
        |           |   variable
        ptr       ptr + 10
        
        To increase the size from 10 to 20 bytes without loosing the content of already allocated memory in that
        case use the functopn realloc().
        
        1. in this case realloc will allocate memory for 20 integers somewhere else 
        2. then copy the contents of first 10 locations from "ptr" to the new place
        3. then deallocates the existing memory and returns the new pointer to the memory
        
        ****************************************************************************
        *           * ----------- *          *
        ****************************************************************************
        1000      1010  mem for   2000        n           n+10           n+20
        ^           ^    other            new memory allocated for increased size
        |           |   variable          new address location "n" till n+20 
        ptr       ptr + 10                the contents of 1000 - 1010 copied to n - n+10 
        
        ****************************************************************************
        *           * ----------- *          *                            *
        ****************************************************************************
        1000      1010  mem for   2000        n           n+10           n+20
                                              ^           ^               ^
        <--mem freed-->                       |           |               |
                                              ptr       ptr + 10         ptr+20 
                                              
                                             new address n will be returned to *ptr 
        
7. Function definition of malloc
    |**************bufsize********************|
    *******************************************
    *               *                         *
    *******************************************
    |               |
    v               v
    buf            ptr  
    void *malloc(int n)
    {
      if (buf+bufsize-ptr > n)
      {
        ptr += n;
        return ptr-n;
      }
      else
        return 0;    
    }
    
8. Useage of free()
    1. Memory allocation of variables can be freed
    2. free() can be used to free the variables for which memory allocated by malloc & calloc
    3. free() has to be used for only one time, if used more than once for same variable it tries to deallocation 
       memory for the variable where memory is not allocated and pointer variable becomes dangling pointer.

9. Difference between structure & array
    structure:
      1. Contains element of different data types
      2. elements are accessed using "." & "->" operator
      3. structure can be assigned to pointer
      4. user defined data type
    array:
      1. contains element of same data type
      2. elements are accessed using index
      3. array cannot be assigned to pointer
      4. derived data type

10. Difference between structure & Union
    Structure:
      1. In structure each member get seperate space for memory.
      2. Total memory required to store a structure is equal to sum of the size of all members of the structure.
      3. any structure members can be accessed in sequence and fetch exact value.
    Union:
      1. In union, the total memory space is allocated is equal to the member of the largest size.
         All other member shares the same memory space.
      2. Total memory to store the union is equal to the largest size of the member of union.
      3. we can access any members of union, but the last member updated in the union will be overwritten on the earlier
         value because it uses same memory space.

11. Difference between Extern & Global
    Extern:
      If the variable is declared with the specifier keyword extern outside the function, then the variable can be
      accessed across the modules.
    Global:
      If the variable declared outside the function without any specifiers then the variable is called globally declared
      and can be accessed within the particular file only.
      
12. Difference between macro and function
    Macro:
      1. it expands inline at the time of compilation
      2. Always result will not be true since it considers double & int as same
      3. Execution time will be less
    Function:
      1. It parameter are placed at stack pointer and then it is processed
      2. the result is accurate
      3. Execution time will be more

13. Why segmentation faults occures?
     1. Dangling pointer  : removing memory for the pointer twice.
     2. Exceeding boundary of array
     3. overflowing of heap
     4. using pointer without allocating memory
     
14. Why implicit declaration warning occures?
    The function is not declared before calling.
    
15. Advantages of function pointer
     1. Function pointer can be passes as an argument and also can be returned from function. Thus code redundancy 
        can be avoided
     2. two or more functions having same argument type can be assigned to the function pointer.
     3. Instead of referring to data values, a function pointer points to executable code within memory

16. What is volotile memory & how it is used in C?
    Volatile memory is a type of storage whose contents are erased when the system's power is turned off or interrupted. 
    For example, RAM is volatile, meaning users will lose a document if they do not save their work to a non-volatile 
    classification of memory, such as a hard drive, before shutting down the computer.
    
    Volatile tells the compiler not to optimize anything that has to do with the volatile variable.
        Let's say you have a little piece of hardware that is mapped into RAM somewhere and 
        that has two addresses: a command port and a data port:
        
        typedef struct
        {
          int data;
          int isbusy;
        } Hardware;
        
        void SndEvent (Hardware *gadget, int data)
        {
          // wait while the gadget is busy:
          while (gadget->isbusy)
          {
            // do nothing here.
          }
          gadget->data = data;
          // writing the command starts the action:
        }
        
        Looks easy, but it can fail because the compiler is free to change the order in which data and commands are written. 
        This would cause our little gadget to issue commands with the previous data-value. 
        Also take a look at the wait while busy loop. That one will be optimized out. 
        The compiler will try to be clever, read the value of isbusy just once and then go into an infinite loop. 
        That's not what you want.
        
        The way to get around this is to declare the pointer gadget as volatile. 
        This way the compiler is forced to do what you wrote
        It can't remove the memory assignments, it can't cache variables in registers and 
        it can't change the order of assignments either:
        
17. Difference between Constant Pointer and Pointer to constant.

    Constant Pointers : 
      These type of pointers are the one which cannot change address they are pointing to. 
      This means that suppose there is a pointer which points to a variable (or stores the address of that variable). 
      Now if we try to point the pointer to some other variable (or try to make the pointer store address of some other 
      variable), then constant pointers are incapable of this.
      
      A constant pointer is declared as : int *const ptr ( the location of 'const' make the pointer 'ptr' as constant 
      pointer)

    Pointer to Constant : 
      These type of pointers are the one which cannot change the value they are pointing to. 
      This means they cannot change the value of the variable whose address they are holding.
      
      A pointer to a constant is declared as : const int *ptr (the location of 'const' makes the pointer 'ptr' as a 
      pointer to constant.
      

********
1.	Bottom Half & Top Half
2.	When Core dump get generate & how u will analyse
3.	What is kernel panic.
4.	How u will generate interrupt
5.	What is semephore & Mutex ? when they are used.
6.	What are all the synchronosation techinques.
7.	What is call back function.
8.	How u will find little or big endian?
9.	whether "unresolved symbol/reference" is a compiler/linker error?
10.	What are all the ways to communicate with kernel.
11.	When coredump will be generated & how u will analyzed.
12.	How to you debug using trace32
13.	How do you use Cscope
14.	what is ctag.
15.	how do you bring up the board.
16.	what is self refferential structure & why we are opting this insted of array.
17.	what is the need for going to structure padding?
18.	what is the basic difference of binary semaphore & mutex.
19.	How OS shedule the process time to different process?
20.	Difference b/w preemtive & non-preemtive
21. How do u use git repositary.
