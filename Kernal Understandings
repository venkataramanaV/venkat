***********************
*How to install Kernal*
***********************
1. Download the latest version of kernal from NET.
2. Make clean
3. make spotless
4. make
5. make modules
6. make bzimage (optional, this is created for transferring image to boards)
7. make install
8. make j8 install (this make script install the system's kernal for activating 8 processors)

***************
*  Commands   *
***************
1. lscpu (this command gives the details of cpu from here we can find how many CPU & core is present in the system)

2. make ARCH=arm CROSS_COMPILE=/usr/bin/arm_linux_gnueabi-menuconfig  (for cross compile)

**************************
*         Learnings      *
**************************
1. The details of unwanted interrupts can be verified from the file
    cat /proc/intterupts ------> Check for spurious intterupts (The unexpectted H/W intterupts such as heat generated by one cpu 
                                 affecting the other which may leads to unexpected o/p's)


2. ***********************************************************
   * What is the need of having more than one CPU's & CORE's *
   ***********************************************************
   1. How multi-threading work's
   
    process-1       process-2       process-3
   ------------     ------------    ------------ 
   | thread 1 |     | thread 1 |    | thread 1 |
   | thread 2 |     | thread 2 |    | thread 2 |
   | thread 3 |     | thread 3 |    | thread 3 |
   ------------     ------------    ------------
   
   * The major use of multi-threading or multi-processing is to perfom the job parallely.
   
   IF CORE = 1 & CPU = 1 (system with single cpu & core)
        At the time single thread will be executed and remaining threads will be waiting untill the previous thread execution
        is completed.
        Here no parallel operations of threads will occur.
        
    IF CORE & CPU > 1 (system with multi cpu & core)
        When CORE = CPU = 2, there will be two threads runs parallely.
             CORE = CPU = 4, there will be four threads runs parallely.
        when number of CORE & CPU increases, the parallel processing also increases which makes the system to perform faster.
        
   
****************************************************************************
*                             Embedded LINUX                               *
****************************************************************************

How to compile new Kernal & upload to the Compact Flash card (CF card):

                                       --------------------
                                       |  project folder  |
                                       --------------------
                                                 |
                                                 v
                                 -------------------------------------
                                 |                                   |
                                 v                                   v
                            ------------                        ------------
                            |   S/W    |                        | makeld.sh|   this make scrip initiates the compilation of the 
                            ------------                        ------------   app src, kernal & loads to CF card. 
                                 |
                                 v
       ---------------------------------------------------------------
       |                             |                               |
       v                             v                               v
  ------------                  ------------                   ------------------
  |    SRC   |                  | H/W Name |                   |Startup scripts |
  ------------                  ------------                   ------------------
    APP Code                    Kernal Code                     scripts to start compile individula folder
                                     |
                                     v
          ---------------------------------------------------------------
          |              |                |               |             |
          v              v                v               v             v
       -------        -------         ----------      ----------    ----------
       | MBR |        |GRUB |         | pcmcia |      | rootfs |    | target |
       -------        -------         ----------      ----------    ----------   
                 Boot loader        driver to drive                 CF card will be mounted 
                 stage 2, loads     the CF card                     on the machine & patitioned 
                 the kernal                                         where the corresponding objects will
                                                                    be placed into the corresponding partition.
                                                                    
***************************                                                                    
* How to partion the card *
***************************

1. Insert the card to the machine.
2. once inserted, find the device in the machine using "fdisk -l"
3. To format/create partition, use the command "fdisk /dev/<device name>" 
   once the "fdisk" command is executed it displays the help page, the various options can be
   used based on the requirement needed.
   
   -----------------------------------------------------------------
   |   boot   |  bzimage  |  rootfs  | startup scripts |  APP/JRE  |
   -----------------------------------------------------------------

*************************************************
* Some commands required for kernal compilation *
*************************************************
1. First configur the kernal by selecting required H/W & de-select the unwanted H/W.
   this ensures that only the modules required for selected component will be compiled.
   
   make menuconfig
   make defconfig
   
2. "make -C linux dep"      ->    "-C" option will change to linux directory and compiled the dependency modules.

3. "make -C linux bzimage"  ->    compiles whole kernal code & convert to zip format

4. "make -C linux modules"  ->    compiles whole driver modules, unless module directory is compiled we cannot insert 
                                  any new modules in run time.

6. "cp -f linux/driver/driverxxxx/module.o rootfs/devicexxx/" : 
                    before compiling the rootfs, load the required modules into the rootfs/device.
                    
5. "make -C rootfs all"     ->    compiles modules required for rootfs
   cp -f rootfs/rootfs.gz target/  copies the rootfs image to the CF card
   
